global pidNumericos
global pidCadenas
global tablaProcesos
global tablaFicheros
global pwd = "__none__"
global ficherosEnPath
global numeroPaths = 0

function esNumero:long (cadena:string) { 
	for (i=0; i < strlen(cadena); i++) {
		if (isdigit(substr(cadena,i,1)) == 0 ) {
			return 0
		}
	}
	return 1
}

probe begin {
	hayProcesos = 0
	for (i=1; i<=argc; i++){
		if (esNumero(argv[i]) == 1) {
			printf ("Monitorizando el proceso %s.\n", argv[i])
			pidNumericos[strtol(argv[i],10)] = 1
			hayProcesos = 1
		} else {
			if (substr(argv[i], 0, 1) == "/") {
				printf ("Monitorizando la ruta %s.\n", argv[i])
				ficherosEnPath[argv[i]] = argv[i]
				numeroPaths += 1
			} else {
				printf ("Esperando a monitorizar %s cuando se ejecute.\n", argv[i])
				pidCadenas[argv[i]] = 1
				hayProcesos = 1
			}
		}
	}

	if (hayProcesos == 0) {
		printf ("No hay trabajo que hacer.\n")
		exit()
	}
}

probe kprocess.exec {
	pid = pid()
	ejecutando = filename
	
	foreach (exe in pidCadenas) {
		if (isinstr(ejecutando,exe)) {
			printf ("Pasamos %s a tabla de pids con %d.\n",ejecutando,pid)
			pidNumericos[pid] = 1
			next
		}
	}
}

probe kprocess.exit {
	pid = pid ()

	if (pid in pidNumericos) {
		printf ("Borrando %d.\n", pid)
		delete pidNumericos[pid]
	}
}

probe syscall.open.return {
	proceso = pid()
	padre = ppid()
	hilo = tid()
	ejecutable = execname()
	insertarEnTabla = 0

	if ( (proceso in pidNumericos) || ( padre in pidNumericos) || (hilo in pidNumericos) ) {
		if ( (proceso in pidNumericos) && (env_var("PWD") != "") ) {
			pwd = env_var("PWD")
		}
		localpwd = (isinstr(env_var("PWD"), "/"))?env_var("PWD"):pwd;

		filename = user_string($filename)
		descriptor = $return

		filename = (substr(filename, 0, 1) == "/")?filename:localpwd . "/" . filename;

		if ([proceso,padre,hilo,descriptor] in tablaProcesos)  {
			printf ("{codigo: \"error\", proceso: \"%s\", pid: %d, ppid: %d, tid: %d, fichero: \"%s\", descriptor: %d}\n", ejecutable, proceso, padre, hilo, filename, descriptor)
		} else {
			if (descriptor >= 0) {
				if (numeroPaths > 0 ) {
					foreach (ruta in ficherosEnPath) {
						if (substr(filename, 0, strlen(ruta)) == ruta) {
							insertarEnTabla = 1
							break
						}
					}
				}
				if ( (insertarEnTabla == 1) || (numeroPaths == 0) ) {
					tablaProcesos[proceso,padre,hilo,descriptor] = gettimeofday_ms()
					tablaFicheros[proceso,padre,hilo,descriptor] = filename
					printf ("{codigo: \"open\", proceso: \"%s\", pid: %d, ppid: %d, tid: %d, fichero: \"%s\", descriptor: %d, date: %d}\n", ejecutable, proceso, padre, hilo, filename, descriptor, tablaProcesos[proceso,padre,hilo,descriptor])
				}
			}
		}
	}
}

probe syscall.close.return {
	proceso = pid()
	padre = ppid()
	hilo = tid()
	descriptor = $fd
	ejecutable = execname()

	if ( (proceso in pidNumericos) || ( padre in pidNumericos) || (hilo in pidNumericos) ) {
		if ([proceso,padre,hilo,descriptor] in tablaProcesos) {
			filename = tablaFicheros[proceso,padre,hilo,descriptor]
			date = gettimeofday_ms() - tablaProcesos[proceso,padre,hilo,descriptor]
			printf ("{codigo: \"close\", proceso: \"%s\", pid: %d, ppid: %d, tid: %d, fichero: \"%s\", descriptor: %d, date: %d}\n", ejecutable, proceso, padre, hilo, filename, descriptor, date)
			delete tablaProcesos[proceso,padre,hilo,descriptor]
			delete tablaFicheros[proceso,padre,hilo,descriptor]
		}
	}
}

#probe end {
#
#}
